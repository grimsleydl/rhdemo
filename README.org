Environment used for screenshots in container presentation.

Somewhat messy, but this will launch the full container environment (takes some time):
~vagrant up app-container-1 app-container-2 app-container-3 db-1 db-2 lb-1~

Flask app should work without the DB, other than the endpoint that hits the DB (in case you don't want to set up an iscsi target for the PCS storage)

Bridge mode containers are not behind Nginx reverse proxy by default.
* Launch Python dev environment
- Install Nix on your system and enable Flakes
  - On non-NixOS:
    - edit either ~$HOME/.config/nix/nix.conf~ or ~/etc/nix/nix.conf~ and add the following line:
      #+begin_src conf
      experimental-features = nix-command flakes
      #+end_src
  - On NixOS, edit your ~configuration.nix~:
    #+begin_src nix
    nix = {
      package = pkgs.nixFlakes;
      extraOptions = ''
        experimental-features = nix-command flakes
      '';
    };
    #+end_src

- ~cd~ into the ~app/~ directory
- run ~nix develop~
* Kubernetes manifest
So as not to check in the private registry URL (and to avoid the overhead of helm), ~demo-k8s.yml~ uses an env variable.

Apply like so:
#+begin_src shell
REGISTRY=[insert image uri] envsubst < demo-k8s.yml | kubectl apply -f -
#+end_src
* Generate Dependency graphs
Using Nix, dependency graphs like the ones in ~./images~ can be generated for any program, with a little legwork:

In NixOS or a Nix shell environment with the package you want a graph for:
#+begin_src shell
nix-store --query --graph $(which vagrant) | dot -Tpng > vagrant.png
#+end_src

You can also supply a Nix store path directly:
#+begin_src shell
nix-store --query --graph /nix/store/c6dwl65z7z9vyadfzp5aqbfv6bi1afnz-python3-3.10.2/bin/python | dot -Tpng > python.png
#+end_src
